generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication Schemas
model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  order         Order[]
  carts         Cart[]
  addresses     Address[]
  wishlists     Wishlist[]

  @@map("user")
}

model Session {
  id        String   @id @default(uuid()) @db.Uuid
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String   @db.Uuid
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(uuid()) @db.Uuid
  accountId             String
  providerId            String
  userId                String    @db.Uuid
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @default(uuid()) @db.Uuid
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Guest {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  expiresAt    DateTime

  carts        Cart[]
  addresses    Address[]
}

// Products Schemas
model Product {
  id               String    @id @default(uuid()) @db.Uuid
  name             String
  description      String
  categoryId       String?   @db.Uuid
  genderId         String?   @db.Uuid
  brandId          String?   @db.Uuid
  isPublished      Boolean   @default(false)
  defaultVariantId String?   @db.Uuid
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  category        Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  gender          Gender?   @relation(fields: [genderId], references: [id], onDelete: SetNull)
  brand           Brand?    @relation(fields: [brandId], references: [id], onDelete: SetNull)
  variants        ProductVariant[]
  images          ProductImage[]
  wishlists       Wishlist[]

  @@unique([name, brandId]) 
}

model Category {
  id       String     @id @default(uuid()) @db.Uuid
  name     String
  slug     String     @unique
  parentId String?    @db.Uuid

  parent   Category?  @relation("CategoryToChildren", fields: [parentId], references: [id], onDelete: SetNull)
  children Category[] @relation("CategoryToChildren")
  products Product[]
}

model Brand {
  id      String   @id @default(uuid()) @db.Uuid
  name    String
  slug    String   @unique
  logoUrl String?
  products Product[]
}

model Gender {
  id       String   @id @default(uuid()) @db.Uuid
  label    String
  slug     String   @unique
  products Product[]
}

model ProductVariant {
  id          String    @id @default(uuid()) @db.Uuid
  productId   String    @db.Uuid
  sku         String    @unique
  price       Decimal   @db.Decimal(10, 2)
  salePrice   Decimal?  @db.Decimal(10, 2)
  colorId     String    @db.Uuid
  sizeId      String    @db.Uuid
  inStock     Int       @default(0)
  imageUrl    String?
  weight      Float?
  dimensions  Json?
  createdAt   DateTime  @default(now())

  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  color       Color     @relation(fields: [colorId], references: [id], onDelete: Restrict)
  size        Size      @relation(fields: [sizeId], references: [id], onDelete: Restrict)
  images      ProductImage[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
}

model Color {
  id       String   @id @default(uuid()) @db.Uuid
  name     String
  slug     String   @unique
  hexCode  String?
  variants ProductVariant[]
}

model Size {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  slug      String   @unique
  sortOrder Int
  variants  ProductVariant[]
}

model ProductImage {
  id        String   @id @default(uuid()) @db.Uuid
  productId String   @db.Uuid
  variantId String?  @db.Uuid
  url       String
  sortOrder Int      @default(0)
  isPrimary Boolean  @default(false)

  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
}

model Wishlist {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  productId String   @db.Uuid
  addedAt   DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId], name: "wishlists_user_product_uniq")
}

enum OrderStatus {
  pending        // Created but not paid yet
  paid           // Payment settled (Midtrans "settlement")
  processing     // Payment done, preparing shipment
  shipped        // Order has been shipped
  delivered      // Customer received the package
  cancelled      // Cancelled before payment or manually
  failed         // Payment failed or expired
}


model Order {
  id                String      @id @default(uuid()) @db.Uuid
  userId            String?     @db.Uuid
  guestId           String?     @db.Uuid
  status            OrderStatus @default(pending)
  totalAmount       Decimal     @db.Decimal(10, 2)
  shippingAddressId String?     @db.Uuid
  billingAddressId  String?     @db.Uuid
  createdAt         DateTime    @default(now())

  user            User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  shippingAddress Address?   @relation("ShippingAddress", fields: [shippingAddressId], references: [id], onDelete: SetNull)
  billingAddress  Address?   @relation("BillingAddress", fields: [billingAddressId], references: [id], onDelete: SetNull)
  items           OrderItem[]
  payments        Payment[]
}

model OrderItem {
  id               String         @id @default(uuid()) @db.Uuid
  orderId          String         @db.Uuid
  productVariantId String         @db.Uuid
  quantity         Int            @default(1)
  priceAtPurchase  Decimal        @db.Decimal(10, 2)

  order   Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Restrict)
}

model Cart {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String?  @db.Uuid
  guestId   String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  guest  Guest?  @relation(fields: [guestId], references: [id], onDelete: SetNull)
  items  CartItem[]
}

model CartItem {
  id               String   @id @default(uuid()) @db.Uuid
  cartId           String   @db.Uuid
  productVariantId String   @db.Uuid
  quantity         Int      @default(1)
  createdAt        DateTime @default(now())

  cart    Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Restrict)
}

enum AddressType {
  billing
  shipping
}

model Address {
  id         String      @id @default(uuid()) @db.Uuid
  userId     String?     @db.Uuid        // optional for guests
  guestId    String?     @db.Uuid        // added for guests
  type       AddressType
  firstName  String
  lastName   String
  line1      String
  line2      String?
  city       String
  state      String
  country    String
  postalCode String
  phone      String       // change from Int to String (to handle "+62", "0812...", etc.)
  isDefault  Boolean     @default(false)

  user           User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  guest          Guest? @relation(fields: [guestId], references: [id], onDelete: Cascade)
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")
}


enum PaymentMethod {
  stripe
  paypal
  cod
}

enum PaymentStatus {
  initiated
  completed
  failed
}

model Payment {
  id            String         @id @default(uuid()) @db.Uuid
  orderId       String         @db.Uuid
  method        PaymentMethod
  status        PaymentStatus  @default(initiated)
  paidAt        DateTime?
  transactionId String?

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
